# -*- coding: utf-8 -*-
"""Assignment 6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1haJcqarwC9s-M48tPOvQL_LQh0LIWWHy
"""

pip install numpy scipy plotly

import numpy as np
import plotly.graph_objects as go
from scipy import constants
from scipy.special import sph_harm


a0 = constants.physical_constants['Bohr radius'][0]
Angstrom = constants.angstrom


def r_phi_theta(x, y, z):
    r = np.sqrt(x**2 + y**2 + z**2)
    phi = np.arctan2(y, x) + np.pi
    theta = np.arccos(z / r)
    return r, phi, theta


def probfunc(r, wavefunc):
    p = r**2 * np.conj(wavefunc) * wavefunc
    return p.real / np.max(p.real)


X, Y, Z = np.mgrid[-20*a0:20*a0:48j, -20*a0:20*a0:48j, -20*a0:20*a0:48j]
r_grid, phi_grid, theta_grid = r_phi_theta(X, Y, Z)


def psi_210(r, theta, phi):
    R = (1 / (4 * np.sqrt(2 * a0**3))) * (r / a0) * np.exp(-r / (2 * a0))
    Y = sph_harm(0, 1, phi, theta)  # m=0, l=1
    return R * Y


psi_grid = psi_210(r_grid, theta_grid, phi_grid)


rho = probfunc(r_grid, psi_grid)


fig = go.Figure(data=go.Isosurface(
    x=X.flatten(), y=Y.flatten(), z=Z.flatten(),
    value=rho.flatten(),
    isomin=0.05, isomax=0.3,
    opacity=0.7,
    surface_count=3,
    colorscale='Viridis',
    caps=dict(x_show=False, y_show=False, z_show=False)
))
fig.update_layout(title="Hydrogen Orbital: n=2, l=1, m=0", scene=dict(
    xaxis_title='x (m)', yaxis_title='y (m)', zaxis_title='z (m)'
))
fig.show()

"""‚Ñì=0 states are spherically symmetric. This means that the probability density
‚à£ùúì(ùëü,ùúÉ,ùúô)‚à£^2 is the same in every direction.
"""

import numpy as np
import plotly.graph_objects as go
from scipy import constants


a0 = constants.physical_constants['Bohr radius'][0]
Angstrom = constants.angstrom


def r_phi_theta(x, y, z):
    r = np.sqrt(x**2 + y**2 + z**2)
    phi = np.arctan2(y, x) + np.pi
    theta = np.arccos(z / r)
    return r, phi, theta


def probfunc(r, wavefunc):
    p = r**2 * np.abs(wavefunc)**2
    return p / np.max(p)


X, Y, Z = np.mgrid[-20*a0:20*a0:48j, -20*a0:20*a0:48j, -20*a0:20*a0:48j]
r_grid, phi_grid, theta_grid = r_phi_theta(X, Y, Z)


n110m0 = lambda r: np.exp(-r/a0) / (np.sqrt(np.pi) * a0**1.5)
n210m0 = lambda r: (2 - r/a0) * np.exp(-r/(2*a0)) / (4 * np.sqrt(2*np.pi) * a0**1.5)

prob_n110m0 = probfunc(r_grid, n110m0(r_grid))
prob_n210m0 = probfunc(r_grid, n210m0(r_grid))


def plot_orbital(prob_data, title):
    fig = go.Figure(data=go.Isosurface(
        x=X.flatten() / Angstrom,
        y=Y.flatten() / Angstrom,
        z=Z.flatten() / Angstrom,
        value=prob_data.flatten(),
        isomin=0.05,
        isomax=0.95,
        opacity=0.4,
        colorscale='Plotly3_r',
        surface_count=8,
        colorbar_nticks=8,
        caps=dict(x_show=False, y_show=False, z_show=False)
    ))

    fig.update_layout(scene=dict(
        xaxis_title='x (√Ö)', yaxis_title='y (√Ö)', zaxis_title='z (√Ö)'
    ),
    width=700,
    margin=dict(r=10, b=10, l=10, t=10),
    title=title)

    fig.show()


plot_orbital(prob_n110m0, "Hydrogen Orbital: n=1, l=0, m=0")
plot_orbital(prob_n210m0, "Hydrogen Orbital: n=2, l=0, m=0")

"""The ùëõ=1 state is the ground state of the hydrogen atom. This is where the electron is most tightly bound and closest to the proton.


"""

import numpy as np
import plotly.graph_objects as go
from scipy import constants


a0 = constants.physical_constants['Bohr radius'][0]
Angstrom = constants.angstrom


def r_phi_theta(x, y, z):
    r = np.sqrt(x**2 + y**2 + z**2)
    phi = np.arctan2(y, x) + np.pi
    theta = np.arccos(z / r)
    return r, phi, theta


def probfunc(r, wavefunc):
    p = r**2 * np.abs(wavefunc)**2
    return p / np.max(p)


X, Y, Z = np.mgrid[-20*a0:20*a0:48j, -20*a0:20*a0:48j, -20*a0:20*a0:48j]
r_grid, phi_grid, theta_grid = r_phi_theta(X, Y, Z)


n110m0 = lambda r: np.exp(-r/a0) / (np.sqrt(np.pi) * a0**1.5)
n210m0 = lambda r: (2 - r/a0) * np.exp(-r/(2*a0)) / (4 * np.sqrt(2*np.pi) * a0**1.5)


prob_n110m0 = probfunc(r_grid, n110m0(r_grid))
prob_n210m0 = probfunc(r_grid, n210m0(r_grid))


def plot_orbital(prob_data, title):
    fig = go.Figure(data=go.Isosurface(
        x=X.flatten() / Angstrom,
        y=Y.flatten() / Angstrom,
        z=Z.flatten() / Angstrom,
        value=prob_data.flatten(),
        isomin=0.05,
        isomax=0.95,
        opacity=0.4,
        surface_count=8,
        colorbar_nticks=8,
        colorscale='Plotly3_r',
        slices_x=dict(show=True, locations=[0]),
        caps=dict(x_show=False, y_show=False, z_show=False)
    ))

    fig.update_layout(scene=dict(
        xaxis_title='x (√Ö)', yaxis_title='y (√Ö)', zaxis_title='z (√Ö)'
    ), width=700, margin=dict(r=10, b=10, l=10, t=10),
    title=title)

    fig.show()


plot_orbital(prob_n110m0, "Hydrogen Orbital n=1, l=0, m=0 with Slice")
plot_orbital(prob_n210m0, "Hydrogen Orbital n=2, l=0, m=0 with Slice")

"""At n=1,l=0, number of radial nodes is 0 and the shape is a central blob. At n=2, l=1 there is one radial node and a hollow shell shape."""

import numpy as np
import plotly.graph_objects as go
from scipy import constants


a0 = constants.physical_constants['Bohr radius'][0]
Angstrom = constants.angstrom


def r_phi_theta(x, y, z):
    r = np.sqrt(x**2 + y**2 + z**2)
    phi = np.arctan2(y, x) + np.pi
    theta = np.arccos(np.clip(z / r, -1, 1))
    return r, phi, theta


def probfunc(r, wavefunc):
    p = r**2 * np.abs(wavefunc)**2
    return p / np.max(p)


X, Y, Z = np.mgrid[-20*a0:20*a0:48j, -20*a0:20*a0:48j, -20*a0:20*a0:48j]
r_grid, phi_grid, theta_grid = r_phi_theta(X, Y, Z)


def psi_320(r, theta):
    coeff = 1 / (81 * np.sqrt(6 * np.pi * a0**3))
    radial = (r**2 / a0**2) * np.exp(-r / (3 * a0))
    angular = (3 * np.cos(theta)**2 - 1)
    return coeff * radial * angular


prob_n320m0 = probfunc(r_grid, psi_320(r_grid, theta_grid))


def plot_orbital(prob_data, title):
    fig = go.Figure(data=go.Isosurface(
        x=X.flatten() / Angstrom,
        y=Y.flatten() / Angstrom,
        z=Z.flatten() / Angstrom,
        value=prob_data.flatten(),
        isomin=0.05,
        isomax=0.95,
        opacity=0.4,
        surface_count=8,
        colorbar_nticks=8,
        colorscale='Plasma',
        slices_x=dict(show=True, locations=[0]),
        caps=dict(x_show=False, y_show=False, z_show=False)
    ))

    fig.update_layout(scene=dict(
        xaxis_title='x (√Ö)', yaxis_title='y (√Ö)', zaxis_title='z (√Ö)'
    ), width=700, margin=dict(r=10, b=10, l=10, t=10),
    title=title)

    fig.show()


plot_orbital(prob_n320m0, "Hydrogen Orbital n=3, l=2, m=0 with Slice")